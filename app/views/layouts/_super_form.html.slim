/ p= member.class.reflect_on_all_associations.map{|a| a.inspect}
/ br
= form_for(member) do |form|
  - if member.errors.any?
    #error_explanation
      h2
        = pluralize(member.errors.count, "error")
        | prohibited this {member.class} from being saved:
      ul
        - member.errors.full_messages.each do |msg|
          li= msg
  - fields.each do |field|
    .field

      
      = form.label field

      - association = member.class.reflect_on_all_associations.select{|a| a.name == field}[0]

      - if association
        / | Association!
        -case association.macro
        -when :belongs_to
          = "which belongs_to #{member.class.to_s}"
          .field
            = form.collection_select(association.foreign_key.to_sym, association.klass.all, :id, :identify)
        -when :has_one
          = "which has_one #{association.klass.name}"
          .field
            = form.collection_select(association.foreign_key.to_sym, association.klass.all, :id, :identify)
        -when :has_many
          p= "has_many" 
          p= "association.foreign_key.to_sym #{association.foreign_key.to_sym}"
          p= "association.klass.all #{association.klass.all.inspect}"
          
          - association.klass.all.each do |i|
            = i.identify

          .field
           
            / = form.collection_select(:id, association.klass.all, :id, :identify)

      - else
        - if !member.class.columns_hash[field.to_s].nil?
          - case member.class.columns_hash[field.to_s].type
          - when :boolean
            = form.check_box field
          - when :integer
            = form.number_field field
          - else        
            = form.text_field field
        - else
          = raise "#{field} is not an editable field."
       

  .actions
    = form.submit